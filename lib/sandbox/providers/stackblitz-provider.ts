import sdk from '@stackblitz/sdk';
import { auth } from '@webcontainer/api';
import { SandboxProvider, type SandboxInfo, type CommandResult, type SandboxProviderConfig } from '../types';

export class StackBlitzProvider extends SandboxProvider {
  private vm: any = null;
  private projectId: string | null = null;
  private projectFiles: Record<string, string> = {};

  constructor(config: SandboxProviderConfig = {}) {
    super(config);

    // Note: WebContainer auth initialization should be done on the client side only
    // See app/generation/page.tsx for client-side auth initialization
  }

  async createSandbox(): Promise<SandboxInfo> {
    console.log('[StackBlitzProvider] Creating new project...');

    // Generate a unique project ID
    this.projectId = `ai-website-${Date.now()}`;

    // Create a basic Vite + React + Tailwind project
    const project = {
      title: 'AI Generated Website',
      description: 'Generated by Open Lovable',
      template: 'node' as const,
      files: {
        'package.json': JSON.stringify({
          name: 'ai-generated-website',
          version: '1.0.0',
          scripts: {
            dev: 'vite',
            build: 'vite build',
            preview: 'vite preview'
          },
          dependencies: {
            'react': '^18.2.0',
            'react-dom': '^18.2.0'
          },
          devDependencies: {
            '@vitejs/plugin-react': '^4.0.0',
            'vite': '^4.3.9',
            'tailwindcss': '^3.3.0',
            'postcss': '^8.4.24',
            'autoprefixer': '^10.4.14'
          }
        }, null, 2),
        'vite.config.js': `import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';

export default defineConfig({
  plugins: [react()],
});`,
        'tailwind.config.js': `/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}`,
        'postcss.config.js': `export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}`,
        'index.html': `<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>AI Generated Website</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>`,
        'src/main.jsx': `import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import './index.css';

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);`,
        'src/App.jsx': `function App() {
  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-500 to-purple-600 flex items-center justify-center p-4">
      <div className="text-center text-white">
        <h1 className="text-4xl font-bold mb-4">ðŸš€ StackBlitz Ready!</h1>
        <p className="text-xl">Your AI-generated website will appear here</p>
      </div>
    </div>
  );
}

export default App;`,
        'src/index.css': `@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}`
      }
    };

    // Store project files for later use
    this.projectFiles = project.files;

    // Create and store sandbox info
    this.sandboxInfo = {
      sandboxId: this.projectId,
      url: `https://stackblitz.com/edit/${this.projectId}`,
      provider: 'stackblitz' as const,
      createdAt: new Date()
    };

    return this.sandboxInfo;
  }

  getProjectFiles(): Record<string, string> {
    return this.projectFiles;
  }

  async writeFile(path: string, content: string): Promise<void> {
    if (!this.vm) {
      throw new Error('No active StackBlitz VM');
    }

    console.log(`[StackBlitzProvider] Writing file: ${path}`);
    
    // StackBlitz SDK uses a different path format
    const normalizedPath = path.startsWith('/') ? path.slice(1) : path;
    
    await this.vm.applyFsDiff({
      create: {
        [normalizedPath]: content
      },
      destroy: []
    });
  }

  async readFile(path: string): Promise<string> {
    if (!this.vm) {
      throw new Error('No active StackBlitz VM');
    }

    const normalizedPath = path.startsWith('/') ? path.slice(1) : path;
    const files = await this.vm.getFsSnapshot();
    return files[normalizedPath] || '';
  }

  async runCommand(command: string): Promise<CommandResult> {
    // StackBlitz doesn't support arbitrary command execution
    // Commands are handled automatically by the WebContainer
    console.log(`[StackBlitzProvider] Command not supported in StackBlitz: ${command}`);
    return {
      stdout: '',
      stderr: 'Command execution not supported in StackBlitz',
      exitCode: 0,
      success: true
    };
  }

  async listFiles(directory?: string): Promise<string[]> {
    if (!this.vm) {
      throw new Error('No active StackBlitz VM');
    }

    const files = await this.vm.getFsSnapshot();
    const allFiles = Object.keys(files);

    if (!directory) {
      return allFiles;
    }

    const normalizedDir = directory.startsWith('/') ? directory.slice(1) : directory;
    return allFiles.filter(file => file.startsWith(normalizedDir));
  }

  async installPackages(packages: string[]): Promise<CommandResult> {
    // StackBlitz automatically installs packages from package.json
    console.log(`[StackBlitzProvider] Package installation handled automatically: ${packages.join(', ')}`);
    return {
      stdout: `Packages will be installed automatically: ${packages.join(', ')}`,
      stderr: '',
      exitCode: 0,
      success: true
    };
  }

  getSandboxUrl(): string | null {
    return this.sandboxInfo?.url || null;
  }

  getSandboxInfo(): SandboxInfo | null {
    return this.sandboxInfo;
  }

  async terminate(): Promise<void> {
    if (this.vm) {
      // StackBlitz VMs are automatically cleaned up
      this.vm = null;
    }
    this.projectId = null;
    this.sandboxInfo = null;
  }

  isAlive(): boolean {
    return this.vm !== null && this.projectId !== null;
  }

  async deleteSandbox(): Promise<void> {
    await this.terminate();
  }

  setVM(vm: any): void {
    this.vm = vm;
  }

  async setupViteApp(): Promise<void> {
    // StackBlitz projects are already configured with Vite in the initial project files
    // No additional setup needed
    console.log('[StackBlitzProvider] Vite app already configured in project files');
  }

  async restartViteServer(): Promise<void> {
    // StackBlitz automatically handles Vite server restarts
    // No manual restart needed
    console.log('[StackBlitzProvider] Vite server restart not needed (handled automatically)');
  }
}

